Git-secret is a tool for encypting files in your repository using GPG keys.

>> Pre-requisites:
    gpg -version
    brew install gnupg

    git secret --version
    brew install git-secret

>> Generate GPG key:
    # view existing GPG keys
    gpg --list-secret-keys --keyid-format LONG

    # Generate new GPG key
    gpg --full-generate-key
        # You'll be prompted for:
            # 1. Key type: Choose (1) RSA and RSA (default)
            # 2. Key size: 4096 bits
            # 3. Expiration: 0 (no expiration)
            # 4. Real name: Krunal Priyadarshi
            # 5. Email: krunalpriyadarshi@carfax.com
            # 6. Comment: Optional
            # 7. Passphrase: leave it blank or Create a strong passphrase

>> Steps:
    git secret init             # Initialize git-secret
    git secret tell <email>     # Add user's GPG key            #NOTE: Re-encyption requires. Otherwise, new user can't decrypt secret files.
    git secret whoknows         # Show users with access

    git secret add <file>       # Add file to encryption
    git secret list             # Show managed files
    git secret hide             # Encrypt all managed files  
    git secret reveal           # Decrypt all .secret files
    git secret reveal -v        # Decrypt files and display which user's GPG key is used.

    git secret killperson <email>   # Remove a user             # NOTE: Re-encryption required. Else removed-user can still use old key.

>> Why each time when user is added or removed, we need to re-encrypt files?
    Git-secret encrypts files using a combination of all authorized users' public keys. 
    When a file is encrypted, it can only be decrypted by users whose keys were included in that specific encryption process.
    When a user is removed from the keyring, they retain the ability to decrypt previously encrypted files because their key was part of the original encryption. 
    This creates a security vulnerability where former team members still have access to sensitive data.

    When a new user is added to the keyring, they cannot decrypt existing files because their key wasn't included in the original encryption process. 
    To grant them access, all files must be decrypted and re-encrypted using the updated keyring that includes the new user's key.
    Re-encryption is essential for maintaining proper access control - it ensures that only current team members can decrypt files while preventing former members from accessing sensitive information.

    NOTE:
        Removed users still can decrypt old files from previous git-commits because of this encryption process which is biggest disadvanctage of git secret.