NOTES:
        > System.out.println(any_object) :
                                 prints object's toString() method if object's toString() method is not overridden. 
                                 It will execute super.Object's tostring() method.
                                 Which is "className@HashCode" of a object.
----------------------------------------------------------------------------------------------------------------
Primitive Datatype:
        Primitive data types specify the size and type of variable values.

        // Datatype - Default Value - Default size - Range      - Range in power of 2
        byte    defaultValue    1 byte or 8 bits      -128 to 127                        - (-2^7) to (2^7-1)
        short   defaultValue    2 bytes or 16 bits    -32,768 to 32,767                  - (-2^15) to (2^15-1)
        int     defaultValue    4 bytes or 32 bits    -2,147,483,648 to 2,147,483,647    - (-2^31) to (2^31-1)
        long    defaultValue    8 bytes or 64 bits    -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807    - (-2^63) to (2^63-1)
        float   defaultValue    4 bytes or 32 bits    1.4e-045 to 3.4e+038               - (-2^127) to (2^127-1)
        double  defaultValue    8 bytes or 64 bits    4.9e-324 to 1.8e+308               - (-2^1023) to (2^1023-1)
        char    defaultValue    2 bytes or 16 bits    0 to 65536                         - (0) to (2^16-1)
        boolean FALSE           1 byte or 2 bytes     0 or 1                             - (0) to (2^1-1)

Non-primitive Datatype/ Reference Datatype:
        instances or objects which stores memory address of variable.
        ex.,
            Array, class, interface, String, Enum

        Enum   ::   Enum is a special "class" that represents a group of FINAL constants.
                    Enum follows private package access mdifier hence we can not create new constants outside of Enum class.
                    If we try to access invalid Enum constant outside, it will throw error message "Invalid Enum constant". Because of this property we do not need to define switch's default value as invalid entry will not be allowed.
                    
                    NOTE:
                        Enum can have constructor, method and variables.
                        Enum can have abstract method.
                        Enum can implement interface.
                        Enum can have main method.

                    example 1: Define new Enum.
                        enum Level {
                            LOW, MEDIUM, HIGH
                        }
                    
                    example 2: Define new Enum with constructor and method.
                        enum Level{
                            // Constant defination:
                            Low(1), 
                            Medium(2),
                            Hard(3);

                            // define of variable and constructor:
                            private int defficultyLevel;

                            Level(int level){
                                this.defficultyLevel = level;
                            }

                            // define of method:
                            public int getDefficultyLevel(){
                                return this.defficultyLevel;
                            }
                        }

                    example 3: Use of Abstract method inside Enum.
                        enum Operation{
                            ADD{
                                @Override
                                public double apply(double a, double b){
                                    return a + b;
                                }
                            },
                            SUBTRACT{
                                @Override
                                public double apply(double a, double b){
                                    return a - b;
                                }
                            };
                            
                            abstract double apply(double a, double b);
                        }

                    example 4: Use of Interface inside Enum.
                        interface 
----------------------------------------------------------------------------------------------------------------
Operations:
                Arithmetic Operations   :   + - * % /
                Unary Operator          :   -num, ~num, !true, i++, i--
                Assignment Operator     :   =, +=, -=, %=, /=, *=
                Relational Operator     :   ==, >, <, >=, <=
                Ternary Operator        :   max = (n1 > n2) ? n1 : n2;
                Bitwise Operator        :   |, &, ^, ~
                Shift Operator          :   <<, >>, >>>
                        note: 
                            << and <<< are both same. 
                            ~ is NOT operation or 1's complement.

                            >> and >>> move bits to the right side but.,
                            >>> takes sign bit as a part.
                            ex.,
                                8 >>> 1 = 2
                                -8 >>> 1 = 1073741822
                            
                1's complement      :
                                Converting every binary bits where 1 -> 0 and 0 -> 1.

                                NOTE: 
                                    For any number N's 1's complement is negative number plus one (-(N+ 1)). 
                                    ex., 
                                    (35)    ->  1's complement is (-36)
                                    (-12)   ->  1's complement is (11).

                                Perfoming 1's complement on Decimal Values (float/ double) is not meaningful in real world. 

                2's complement      : 
                                To find negative number of given number, 2's complement is being used.
                                2's complement= (1's complement + 1)

String          ::
                        isEmpty() method is safe to use even if the string is null. It returns true if the string is empty or null.
                        equals("") could throw a NullPointerException if the string is null.
                                String str = null;
                                System.out.println(str.isEmpty());      // No exception, prints 'true'
                                System.out.println(str.equals(""));     // NullPointerException
                        
                        
                        String format
equals          ::
                    Sign "==" is used to compare primitive datatypes.
                    ex.,
                        int a = 10, b = 10;
                        System.out.println( a == b );   // true

                    For non-primitive datatypes such as objects (String,Integer), Sign "==" will compare references not values. 
                    Because these datatypes addresses are saved there.
                    ex.,
                        String str1 = "abc";
                        String str2 = "abc";
                        System.out.println( str1.equals(str2) );    // true
                        System.out.println( str1 == str2 );         // false --> references are checked.
                                      
equals for custom objects   ::
                        Step1:
                            Check references of both objects, if they are same return true.
                                ex., 
                                    public boolean equals(Object obj) {
                                        // Step 1: Check for reference equality 
                                        if (this == obj) {
                                            return true;
                                        }
                                    }
                        Step2:
                            Check instance/ Object type of both objects. (instanceOf/ getClass() methods)
                                ex.,
                                    public boolean equals(Object obj) {                                        
                                        // Step 2: Check if the parameter is not null and is an instance of MyClass
                                        if (obj == null || !(obj instanceof MyClass)) {
                                            return false;
                                        }
                                    }
                        Step3:
                            If not, Type cast and check each values of objects.
                                ex.,
                                    public boolean equals(Object obj) {
                                        // Step 3: Type cast the parameter to MyClass
                                        MyClass otherObject = (MyClass) obj;
                                        return id == otherObject.id && name.equals(otherObject.name);
                                    }

                NOTE:
                    this equals() method automatically executes when list of object is comparing a object.
                    ex.,
                        ArrayList<animal> animals;
                        // when contains method is executes, it will look for objects' equals() method to compare object and their values.
                        if(animals.contains(animal a)){
                            sout("Value already exist in ArrayList");
                        }

substring       ::
                        A substring of a string is a contiguous block of characters in the string
                            ex., the substrings of abc are a, b, c, ab, bc, and abc.

StringBuilder   :: In loop, "StringBuilder" is better to use inplace of String Concatenation:
                        Strings are immutale while StringBuilder are mutable.
                            ex.,
                                String Concatenation:
                                    String str= a+ b+ c; //a,b,c are string variable.
                                StringBuilder: 
                                    StringBuilder str.append(a).append(b).append(c).append(" ");

                        // using setLength(0) to reset the StringBuilder or creating a new one in each iteration.

Scanner         :: Used for get User input.
                        eg.,
                            import java.util.scanner; 
                            Scanner sc= new Scanner(system.in);
                            String s= sc.nextLine();
                            --------------------------------------------
                                nextLine()      :: reads String value
                                nextInt()       :: reads int value
                                nextFloat()     :: reads float value
                                nextBoolean()   :: reads bool value
                                nextLong()      :: reads long value
                                nextShort()     :: reads short value
                                nextByte()      :: reads byte value
                                nextDouble()    :: reads double value

                                NOTE: 
                                A common issue when using the Scanner class in Java:
                                    nextInt() method only reads Integer and which result in, not reading "enter" or "new line" character.
                                    which was pressed after entring number. Hence use another nextLine() to read it before reading another line.
                                        ex.,
                                             Scanner scanner = new Scanner(System.in);
                                             int num = scanner.nextInt();
                                             scanner.nextLine();    // Consume the newline character
                                             String s= scanner.nextLine();
                                             scanner.close();
                                Make sure to close "scanner" at the end.
                                    Scanner sc= new Scannner();
                                    sc.close();

                        Integer.valueOf(scanner.nextLine()); ------------------- vs ------------------- scanner.nextInt();
                                User will enter some value in input stream Which will be read by Scanner.

                                Integer.valueOf(scanner.nextLine());
                                        It will read whole line and convert it into Integer Value. And input stream will be empty after that.
                                        For Empty or non-interger value, it will throw NumberFormatException.
                                scanner.nextInt();
                                        It will read only INT part from input stream and leave remaining white spaces in input stream. Which will causing error in subsequent input reading. 
                                        For Empty or non-interger value, it will throw InputMismatchException.

                :: Read content of File using Scanner.
                        eg.,
                            import java.io.File;
                            import java.io.FileNotFoundException;
                            import java.util.Scanner;

                            -- pass file name in object of File in parameter...
                            Scanner sc = new Scanner (new File("fileName.txt"));
                                                " OR "
                            File myFile = new File("fileName.txt); 
                            Scanner sc = new Scanner (myFile);

                            try{
                                -- make sure to check end of file before reading content.
                                while(sc.hasNextLine()){
                                    String s = sc.nextLine();
                                }
                            }

For-Each loop   :: iterate thorugh each element of array or collection.
                        ex.,
                            int arr[]= {1, 2, 3, 4};
                            // for-Each loop
                            for(int i: arr){
                                System.out.print(i);
                            }

Labeled loops   :: Loop can have a label which will be used inside continue or break statement.
                    syntex:
                           { Label assigned to loop + colon }
                           ex.,
                                innerLoop :
                                outerLoop :

                    ex.,
                        outerLoop:
                        for(int i= 0-> n)
                            innerLoop:
                            for(int j= 0-> n)
                                if(j> 5)
                                    break outerLoop;

Array           ::
                    int[] arr= new int[5];
                    int arr[]= new int[5];
                    int[] arr= {1, 2, 3, 4, 5};

                    NOTE:
                        int[] arr= null;
                        arr.lenght --> null exception occurs.

ArrayList       :: ArrayLists are updatable while built-in arrays are not updatable.
                        ArrayList<String> arr= new ArrayList<String> ();
                        arr.get(0);                 -   return ArrayList element
                        arr.add("new");             -   add new element at the end
                        arr.set(0, "newValue");     -   update value of element
                        arr.remove();
                            > arr.remove(int index)     -   removes the element from a specific position.                                    
                            > arr.remove(object)        -   removes the first occurrence of the specified element.
                        arr.clear();                -   remove all elements
                        arr.removeAll(object arrayList)             -   removes all elements from the given arrayList object as a parameter.
                        arr.size();                 -   return size

                        ArrayList.clear() vs ArrayList.removeAll()
                                    Both methods remove elements from ArrayList with a time complexity of O(1) for clear() and O(n) for the removeAll() method.
                                    Note: removeAll() methods remove one by one element from List because its main use is to find subset (A - B) of two sets A and B. 
                        Hence it removes elements from the given ArrayList/Object as a parameter.

sorting         ::  A sorting algorithm to arrange elements of an array in specific order.

                    Stability   :   Algorithm is stable if it preserves the order of elements.
                                    ex., if 2 elements have same relative order then after sorting it will maintain same order.

                                Sorting Algorithm    Stability
                                Bubble Sort          Yes
                                Selection Sort       No
                                Insertion Sort       Yes
                                Merge Sort           Yes
                                Quicksort            No
                                Counting Sort        Yes
                                Radix Sort           Yes
                                Bucket Sort          Yes
                                Heap Sort            No
                                Shell Sort           No

                    Bubble sort ::  This algorithm based on bubble traveling to surface. 
                                    Where each element is compared with other elements of Array.
                                    
                                    NOTE:   Optimized bubble sort, we'll use boolean value to check if any swapping is happening or not. 
                                            If not it is already sorted and we can break loop.

Arrays.sort()        ::
                        Arrays.sort() is used to sort the array in ascending order.
                        It uses Dual-pivot Quicksort algorithm which has O(N logN) time complexity.
                        Arrays.sort() uses different algorithms like.,
                                Primitive types: Dual-Pivot Quicksort (faster)
                                Objects: TimSort (stable sorting)

Collections.sort()   ::
                        Check out folder "JAVA Collections-sort-method" for implementation.
                        TC is O(N logN).
                        Collections.sort() method is used for object Collections like ArrayList, LinkedList etc.
                        Collections.sort() typically uses a stable sorting algorithm like MergeSort or TimSort.

                        NOTE:
                            Do not forget to check for null value. Object can have null value and can lead to NullPointerException.
                            ex.,
                                // do this wile comparing:
                                // Lambda function to do comparison and sort: null has highest priority. sort base on date then title (desc).
                                Collections.sort(events, (e1, e2)->{
                                    int dateComparison;
                                    if(e1.getDate()== null && e2.getDate()== null)
                                        dateComparison= 0;
                                    else if(e1.getDate()== null)
                                        dateComparison= -1;
                                    else if(e2.getDate()== null)
                                        dateComparison= 1;
                                    else
                                        dateComparison= e1.getDate().compareTo(e2.getDate());
                                    
                                        if(dateComparison!= 0)
                                        return dateComparison;

                                    return e2.getTitle().compareTo(e1.getTitle());
                                });
                            
Arrays.sort()   V/S     Collections.sort()      ::
                        Collections.sort() is slower than Arrays.sort() when it is used for primitive data-types.                        
                        As it creates an array of list elements, sort them using an adaptive MergeSort algorithm,
                        and iterate over the list to find place for each element.

                        Stability in sorting is better in Collections.sort() than Arrays.sort().
                        { When 2 items have same value than they should hold same order as it was earlier rather than swapping for same value. }
                        { It is import as we might have ID or timeStamp for object and it is wise not to swap elements if they have same value. }

                        class person{ String name; int age; }
                        person p1= new ("krunal", 22);
                        person p2= new ("varun", 22);
                        person p3= new ("kruz", 22);

                        person[] persons;
                        Arrays.sort(persons, new sortByAge())       
                        // when sorting is applied it might swap elements and won't store its original/ insertion order for same value.
                        new order can be {p2, p3, p1} or {p3, p2, p1} or any combination of these.

                        ArrayList<student> students;
                        Collections.sort(students, new sortByAge()); 
                        // when sorting is applied it will not swap elements. and preserve insertion order.
                        new order will preserve order for same value.
                        new order will be {p1, p2, p3}.

NumberFormat    :: Used to convert it into currency format.
Hashing         ::
                    Synchronized data structure     :: 
                            HashTable
                    Non-Synchronized data structure :: 
                            HashMap, HashTree, HashSet, TreeSet

                            NOTE:
                                HashMap and HashSet do not preserve insert order means when you printing order is different.
                                To preserve insert order, use HashTree and TreeSet which are replacement of HashMap and HashSet.

                    HashTable is synchronized, which means it is thread-safe and can be shared between multiple threads.
                    While HashMap, HashTree and HashSet do not have in-built synchronization method. we have to builde method for it.

                    NOTE:
                    TIME COMPEXITY for operations like adding, updating, deleting are O(1) for avg cases.
                    For worst case, TL increased to O(n) because of hash collisions or when resizing occurs.

                    Data Structure      Add (Average)   Remove (Average)    Contains (Average)  Update (Average)
                    --------------------------------------------------------------------------------------------
                    HashSet             O(1)            O(1)                O(1)                O(n)
                    HashMap             O(1)            O(1)                O(1)                O(1)
                    LinkedHashSet       O(1)            O(1)                O(1)                O(n)
                    LinkedHashMap       O(1)            O(1)                O(1)                O(1)
                    TreeSet             O(log n)        O(log n)            O(log n)            O(n)
                    Hashtable           O(1)            O(1)                O(1)                O(1)

                    HashMap vs HashSet  ::
                            HashMap is like dictonary where unique key has a value. Different Keys can have same value but keys are unique.
                            HashSet is a set where each key is unique and mainly used to check if keys are unique or not in CP.

                    HashMap ::
                                map.getOrDefault() method.
                                map.merge() method.

VarArgs         ::
            VarArgs is also known as Variable-length arguments. 

            VarArgs is defined by ... (three dots) and each method can have only one varargs parameter and it could be at the end of parameters.

            ex.,
                public void method(String... args){..}                  // valid
                public void method(String arg, String... args){..}      // valid 
                public void method(String... args, String arg){..}      // invalid -> varargs should be at the end. 

            VarArgs acts as an array and can be accessed using index.
            ex.,
                public void method(String... args){
                    for(int i= 0; i< args.length; i++){
                        System.out.println(args[i]);
                    }
                }

            NOTE:
                Ambiguity with VarArgs and Overloading:
                            Compiler sometimes get confuse to choose method between VarArgs and Overloading.
                            And result in Ambiguity error.

                            ex.,
                                public void add(int... args){..}
                                public void add(int x, int args){..}

                                add(1);          // Ambiguity error.
                                add(1, 2);       // Ambiguity error.
                                add(1, 2, 3);    // Ambiguity error.

                A class can't have same named varArgs and array as parameter. It will show DUPLICATE error.
                            ex.,
                                public void add(int... args){..}    // Error        --> remove one of these two to avoid issue.
                                public void add(int[] arr){..}      // Error

Java Reflaction     ::
            Java Reflaction API allows developer to inspect and manipulate classes, interfaces, fields, methods at runtime.
            We can retrive class name, methods name that class have, fields name that class have, etc.
            We can also create new instance of class, invoke methods, get and set fields value.

            ex.,
                Class<?> c= Class.forName("java.lang.String");
                Method[] methods= c.getDeclaredMethods();
                Field[] fields= c.getDeclaredFields();


----------------------------------------------------------------------------------------------------------------
Assertion       ::
                    Assertion is a mechanism to check if the code is working as expected. 
                    It is testing tool. It will stop the execution and show error message.
                    syntex.,
                        assert functionName(parameter para)== 7: "Failed for TestCase: 6";
                    ex.,
                        assert isPalindrome("abcdcba")== True: "Failed testCase 1";
                        assert isPalindrome("abcdcb")== False: "Failed testCase 2";

                    For String object, make sure to use equals() method.
                        
                    NOTE: when you run .java file make sure to enable assertion else it won't throw assertion error.
                    ex., "java -ea file.java"       // it will enable assertion.