String          ::
                        isEmpty() method is safe to use even if the string is null. It returns true if the string is empty or null.
                        equals("") could throw a NullPointerException if the string is null.
                                String str = null;
                                System.out.println(str.isEmpty());      // No exception, prints 'true'
                                System.out.println(str.equals(""));     // NullPointerException

equals          ::
                    Sign "==" is used to compare primitive datatypes.
                    ex.,
                        int a = 10, b = 10;
                        System.out.println( a == b );   // true

                    For non-primitive datatypes such as objects (String,Integer), Sign "==" will compare references not values. 
                    Because these datatypes' addresses are saved there.
                    ex.,
                        String str1 = "abc";
                        String str2 = "abc";
                        System.out.println( str1.equals(str2) );    // true
                        System.out.println( str1 == str2 );         // false --> references are checked.
                                      
equals for custom objects   ::
                        Step1:
                            Check references of both objects, if they are same return true.
                                ex., 
                                    public boolean equals(Object obj) {
                                        // Step 1: Check for reference equality 
                                        if (this == obj) {
                                            return true;
                                        }
                                    }
                        Step2:
                            Check instance/ Object type of both objects. (instanceOf/ getClass() methods)
                                ex.,
                                    public boolean equals(Object obj) {                                        
                                        // Step 2: Check if the parameter is not null and is an instance of MyClass
                                        if (obj == null || !(obj instanceof MyClass)) {
                                            return false;
                                        }
                                    }
                        Step3:
                            If not, Type cast and check each values of objects.
                                ex.,
                                    public boolean equals(Object obj) {
                                        // Step 3: Type cast the parameter to MyClass
                                        MyClass otherObject = (MyClass) obj;
                                        return id == otherObject.id && name.equals(otherObject.name);
                                    }

                NOTE:
                    this equals() method automatically executes when list of object is comparing a object.
                    ex.,
                        ArrayList<animal> animals;
                        // when contains method is executes, it will look for objects' equals() method to compare object and their values.
                        if(animals.contains(animal a)){
                            sout("Value already exist in ArrayList");
                        }

substring       ::
                        A substring of a string is a contiguous block of characters in the string
                            ex., the substrings of abc are a, b, c, ab, bc, and abc.

StringBuilder   :: In loop, "StringBuilder" is better to use inplace of String Concatenation:
                        Strings are immutale while StringBuilder are mutable.
                            ex.,
                                String Concatenation:
                                    String str= a+ b+ c; //a,b,c are string variable.
                                StringBuilder: 
                                    StringBuilder str.append(a).append(b).append(c).append(" ");

                        // using setLength(0) to reset the StringBuilder or creating a new one in each iteration.

Scanner         :: Used for get User input.
                        eg.,
                            import java.util.scanner; 
                            Scanner sc= new Scanner(system.in);
                            String s= sc.nextLine();
                            --------------------------------------------
                                nextLine()      :: reads String value
                                nextInt()       :: reads int value
                                nextFloat()     :: reads float value
                                nextBoolean()   :: reads bool value
                                nextLong()      :: reads long value
                                nextShort()     :: reads short value
                                nextByte()      :: reads byte value
                                nextDouble()    :: reads double value

                                NOTE: 
                                A common issue when using the Scanner class in Java:
                                    nextInt() method only reads Integer and which result in, not reading "enter" or "new line" character.
                                    which was pressed after entring number. Hence use another nextLine() to read it before reading another line.
                                        ex.,
                                             Scanner scanner = new Scanner(System.in);
                                             int num = scanner.nextInt();
                                             scanner.nextLine();    // Consume the newline character
                                             String s= scanner.nextLine();
                                             scanner.close();
                                Make sure to close "scanner" at the end.
                                    Scanner sc= new Scannner();
                                    sc.close();

                        Integer.valueOf(scanner.nextLine()); ------------------- vs ------------------- scanner.nextInt();
                                User will enter some value in input stream Which will be read by Scanner.

                                Integer.valueOf(scanner.nextLine());
                                        It will read whole line and convert it into Integer Value. And input stream will be empty after that.
                                        For Empty or non-interger value, it will throw NumberFormatException.
                                scanner.nextInt();
                                        It will read only INT part from input stream and leave remaining white spaces in input stream. Which will causing error in subsequent input reading. 
                                        For Empty or non-interger value, it will throw InputMismatchException.

                :: Read content of File using Scanner.
                        eg.,
                            import java.io.File;
                            import java.io.FileNotFoundException;
                            import java.util.Scanner;

                            -- pass file name in object of File in parameter...
                            Scanner sc = new Scanner (new File("fileName.txt"));
                                                " OR "
                            File myFile = new File("fileName.txt); 
                            Scanner sc = new Scanner (myFile);

                            try{
                                -- make sure to check end of file before reading content.
                                while(sc.hasNextLine()){
                                    String s = sc.nextLine();
                                }
                            }


For-Each loop   :: iterate thorugh each element of array or collection.
                        ex.,
                            int arr[]= {1, 2, 3, 4};
                            // for-Each loop
                            for(int i: arr){
                                System.out.print(i);
                            }

ArrayList       :: ArrayLists are updatable while built-in arrays are not updatable.
                        ArrayList<String> arr= new ArrayList<String> ();
                        arr.get(0);                 -   return ArrayList element
                        arr.add("new");             -   add new element at the end
                        arr.set(0, "newValue");     -   update value of element
                        arr.remove();
                            > arr.remove(int index)     -   removes the element from a specific position.                                    
                            > arr.remove(object)        -   removes the first occurrence of the specified element.
                        arr.clear();                -   remove all elements
                        arr.removeAll(object arrayList)             -   removes all elements from the given arrayList object as a parameter.
                        arr.size();                 -   return size

                        ArrayList.clear() vs ArrayList.removeAll()
                                    Both methods remove elements from ArrayList with a time complexity of O(1) for clear() and O(n) for the removeAll() method.
                                    Note: removeAll() methods remove one by one element from List because its main use is to find subset (A - B) of two sets A and B. 
                        Hence it removes elements from the given ArrayList/Object as a parameter.

NumberFormat    :: Used to convert it into currency format.
