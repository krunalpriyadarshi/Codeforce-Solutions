Git secrets is for preventing secrets from being committed.

# Git Secrets is a tool that prevents developer from commiting sensitive information like password, API keys or token to Git repository.
# The Protection Mechanism
    Pre-commit Hook: Runs before each commit
    Pattern Matching: Uses regex to detect secret-like strings
    Blocking: Prevents commit if secrets are found
    Reporting: Shows exactly what was detected and where

Advatage:
    - Light weight tool
    - Best for AWS integrated project since gitSecrets has library for it.
Disadvantage:
    - Pattern based detection
    - Generate False positives
    - Local protection only
    - No protection if bypassed 
    - Regex maintence; Patterns need regular updates
    - Not good when working with complex secret formula

>> Basic commands
    git secrets --help 

    # install git-secrets in current repository:
    git secrets --install

    # View all the patterns that are currently being scanned for:
    git secrets --list

    # Scan all the files in the current repository for secrets:
    git secrets --scan

    # Scan all the files in the current repository for secrets, including uncommitted changes:
    git secrets --scan -r
    git secrets --scan --no-index

    # Scan entire repository history:
    git secrets --scan-history

>> Pattern - Provider - Allowed 
    git secrets --add 'pattern-regex'
    git secrets --add allowed 'safe-pattern-regex'
    git secrets --add literal 'exact-string-no-regex'

    # External library or file can be added to Git-secrets list
    git secrets --add-provider './file-path'
    ex.,
        git secrets --add-provider './azure-provider.sh'
        git secrets --add-provider './db-provider.sh'
            Here, azure-provider.sh and db-provider.sh are files with patterns inside.

    # Ignore pattern or literal string during secret scan
    git secrets --add --allowed 'AKIAIOSFODNN7EXAMPLE'
        Above key is AWS's official example key.
    git secrets --add --allowed 'test@myPassword123'

>> Remove Pattern - Provider - Allowed
    # Remove specific item from list
    git config --unset secrets.patterns "exact-pattern"
    git config --unset secrets.providers "./file-name"
    git config --unset secrets.allowed "exact-allowed-pattern"

    # Remove whole category 
    git config --unset-all secrets.pattern
    git config --unset-all secrets.providers
    git config --unset-all secrets.allowed

    # REMOVE EVERYTHING - Nuclear option
    git config --remove-section secrets

# Register ALL AWS pattern at once 
git secrets --register-aws

>>>> Advanced Usage:
    # Use --global to apply patterns, literals, and providers at the global level.
    # This means any patterns, allowed literals, or providers you add globally will be enforced across all repositories for your user.
    # Useful for organization-wide policies or personal protection across multiple projects.

    # Install git-secrets hooks globally (applies to all your repositories):
    git secrets --install --global

    # Add a global
    git secrets --add --global 'pattern-regex'
    git secrets --add --global allowed 'safe-pattern-regex'
    git secrets --add --global literal 'exact-string-no-regex'
    git secrets --add-provider --global './file-path'

    # List all global patterns, allowed patterns, and providers:
    git secrets --list --global

    # Remove a global pattern, provider, or allowed pattern:
    git config --global --unset secrets.patterns "exact-pattern"
    git config --global --unset secrets.providers "./file-name"
    git config --global --unset secrets.allowed "exact-allowed-pattern"

    # Remove all global patterns, providers, or allowed patterns:
    git config --global --unset-all secrets.patterns
    git config --global --unset-all secrets.providers
    git config --global --unset-all secrets.allowed

    # Remove the entire global secrets section (nuclear option):
    git config --global --remove-section secrets

    # Register all AWS patterns globally:
    git secrets --register-aws --global

    # Note:
    # - Global settings affect all repositories for the current user.
    # - Local repository settings override global settings if there is a conflict.
    # - Use global settings for consistent secret protection across all your projects.