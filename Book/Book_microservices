Microservices   
    Itâ€™s an approach to achieving loose coupling by creating multiple independent components, each with its own process. This enhances agility, scalability, usability, and enables parallel development. While making complex to built and achieve security.

MONOLITHIC V/S MICROSERVICES    :
            Parallel development    -
                Dev team can work independently on different componenets witout blocking development of other each other.
                
                In monolithic, it is hard to achieve compared to microservices.
                    - Tight coupling
                        - The same code base is shared in the application, and changing that might break other parts of the system.
                    - Limited tech choices:
                        - In monolithic, the same tech stack has to be used for the whole application.
                        - In microservices, each team can pick the best/optimized tech stack as per requirement.
                    - Testing:
                        - The whole application needs to be tested, which is time-consuming.
                    - Deployment:
                        - The whole application needs to be packaged and re-deployed.    
            
            Agility -
                It is ability to adapt changes quickly in terms of speed and responsiveness.
                
                In monolithic, components are thight couple compated to microservices which make it less agile.
                    - Any change in monolithic app can impact entire app which makes longer development, testing and deployment.
                    - Any change in microservices can impact independent service which makes it loose coupling and faster software development cycle.

            Scalibility -
                Ability to handle newly added resources without impacting performance. Resource can be traffic (new users and new data).

                In monolithic, if Order component gets more traffic then we need to scale whole application. In result, less used components such as Review component are created Which leads to more waste of resource and incresed costs. 

                In microservices, if order component gets more traffic we can only increse scale of that component. It is more efficient and cost-effective

            Usability   -
                How easily a system can be used, extended and maintained -- both from development and user experience perspective.

                Microservices have more edge because they are easier to maintain and scale.

            Complexity  -
                Microservices are more complex to create as it require more planning and infrastructure. Microservices have more issues/errors related to latency adn failure between services.

            Security    -
                Monolithics are easy to secure because of single entry point, simple data access and single point of failure.
                Microservices on other hand have multiple entry points and each entry points needs to be secure and handled each issue/error. Also, they've differenet data base which create data isolcation.

Why SpringBoot better to use for microservices?
            Springboot provides full range of built in features, integration and starter project. ex, dependency injection, auto-configuration etc.
            It also provides built in servers like Tomcat, Jetty during development.
            Additionally, production-ready features health check, admin etc.
            Last but not least, smooth cloud integration and containerization.

YAML V/S properties file:
            YAML file is lightweight and easy to read.
            Mainly used for configuration and automation.
            YAML is used for springboot configuration, Docker, Kubernets, CI/CD pipeline etc.

            properties file:
                // application.properties
                    server.port=8080
                    spring.datasource.url=jdbc:h2:mem:testdb
                    spring.datasource.username=sa
                    spring.datasource.password=password    
                    app.user[0]=Krunal
                    app.user[1]=kruz

            yml file:
                // application.yml
                    server:
                        port: 8080
                        datasource:
                            url: jdbc:h2:mem:testdb
                            username: sa
                            password: password
                    app:
                        user:
                            -Krunal
                            -kruz

Implement REST services:
            REST service entry points
                CRUD operations
                    Create  ->  HttpMethod.POST
                    Read    ->  HttpMethod.GET
                    Delete  ->  HttpMethod.DELETE
                    Update  ->  HttpMethod.PATCH/PUT
            Error/Exception handling   
            Document Rest services

DTO (Data Transfer Object)  :
            DTOs are used to fetch only required data instead of fetching entire entity object.

            Advantages of DTOs:
                ->  Encapsulate Entity   ::  
                        DTOs decouple the database layer from the API layer, preventing direct exposure of entity models.
                        Here, DTOs hide sensitive data such as Id, password from client application. 
                        DTOs do not update entity object.
                ->  Performance ::
                        DTOs send only required fields which reduce overall payload of server.
                        DTOs combine data from multiple entities and send single response object.
                ->  Security    ::
                        DTOs allow custom validations before processing request.
                        DTOs hide/filter sensitive information while sending response to presentation layer.

Response V/S ResponseEntity :
            Response will send only data retrieved from data access layer.
            Response entity will not only have response but also error code, error message and body.

Create REST webApplication:
            Step 1
                Add dependency to create webApp.
                    Spring Web  -
                                It provides built in core features for building web/RESTful applications.
                    H2 Database -
                                For testing/PoC spring project, To server based memory database H2DATABASE is used.
                    Spring Data JPA -
                                To interact with databases by using Java objects and an abstraction over CRUD operations.
                    Spring Boot Actuator    -
                                Provides built in endpoints to monitor health and metrics over memory usage, http request, CPU load etc.
                    Spring Boot DevTools    -
                                Re-Start application much faster for better dev experience.
                    lombok  -
                                Built in annotation to automatically generate Getter, Setter, constructor and toString() method.
                    Validation  -
                                Bean validation.

            Step 2
                Create EndPoint and access it.
                    // accountController.java
                    @RestController
                    public class accountController {

                        @GetMapping("hi")
                        public String welcome(){
                            return "Hello Krunal! <br/>This is your application. Enjoy!";
                        }
                    }
                Access endpoint by http://localhost:8080/hi address

            Step 3
                Create H2DATABASE and table inside:

                Step 3.1
                    Configure H2 in application.yml        
                        # application will run on port number 8080.
                        server:
                            port: 8080

                        # jdbc h2 setting up username, password and url
                        spring:
                            datasource:
                                url:  jdbc:h2:mem:testdb        #   testdb will be created in server memory.
                                username: sa                    #   default h2database id/password.
                                password: ''
                            
                        # setting up H2's web based console:
                        spring:
                            h2:
                                console:
                                    enabled: true               #   With enable console, dev can open web-based H2-console and execute SQL query.
                                                                #   If H2-console is disable, dev can't open it. Only way to validate query is through operation or log in application.

                        # Dialect which will act as translator to communicate between spring application and h2database.
                        spring:
                            jpa:
                                driverClassName: org.h2.Driver  #   H2 Driver will be used as translator between application and h2 database. where translator knows how to handle request like connecting, querying and updateing data.
                                hibernate:
                                    ddl-auto: update            #   for development
                                show-sql: true                  #   show sql query on console during run-time

            Step 4
                Create DATABASE and Entity class:
                Step 4.1
                    Create Database in .sql file:
                        // schema.sql
                        CREATE TABLE IF NOT EXISTS `customer` ();
                        CREATE TABLE IF NOT EXISTS `accounts` ();
                Step 4.2
                    Entity class:
                        // Customer.java
                        @Entity
                        @Table(name = "customer")
                        @Getter @Setter @ToString @AllArgsConstructor @NoArgsConstructor
                        public class Customer extends BaseEntity{
                            @Id
                            private long customerId;

                            @Column(name = "name");
                            private String name;
                        }
                Step 4.3
                    JPA Repository:
                        // AccountRepository.java

validated on @pathVariable and @requestParams
valid on @RequestBody

audit ->
    baseEntity -> @CreatedBy @CreatedAt @LastModifiedBy @LastModifiedAt
    auditOrAware class  ->  override method AuditOrAware<String> and give component name to it.
    main file   ->  @EnableJpaAuditing(auditOrAwareRef = beanComponentNameFrmAoveStep) 

Swagger API -> for documentation...
    add dependency
    go to...
         localhost:8080/swagger-ui/index.html

    NOTE:
        make sure getter is available for schema/DTO/EntityClass

    For entityClass/ DTO:
        @Schema(
            name = "",
            description = ""
        )
        public class Table{
            
            @Schema(
                description =""
            )
            private String name;
        
        }

    For RestAPI controller:
        @Tag(
            name = "",
            description = ""
        )
        public class AccountContoller{
            @Operation(
                summary ="",
                description = ""
            )
            @APIREsponses({
                @ApiResponse(
                    responseCode = "",
                    description=""
                ),
                @ApiResponse(
                    responseCode = "",
                    description ="",
                    content = @Content(
                        schema = @Schema(implementation = .class)
                    )
                )
            })
        }

@RestController     -->     @Controller + @ResponseBody
new ResponseEntity<?>
RequestEntity<?>    |    @RequestBody   |    @requestHeader
@RequestParams

Strangler Fig pattern   ::
            It is an approach to replace monolithic application with Microservices. 
            A existing domain of monolethic application is being replced by an microservice once it is availble for production. 
            But 100% of traffic is not being moved directly but on some ration is moved for test and validation purposes. 
            Later one by one, components are being replaced by microservices.

Docker  ::
            Generate Docker image   :
                        DockerFile  -
                            Write layer of instructions.
                            Once build command is executing, this DockerFile is used to generate a docker image on a Docker Server.

                            NOTE:
                                If Layer of DockerFile is not changed, cache is being used by server.
                                If Layer of DockerFile is canged, all following layers will be executed.

                            Example :
                                    Step 1:
                                        packing can be done either in jar or war version.

                                        Add this line to POM.xml:
                                            <packaging>jar</packaging>

                                        Now, Let's compile application from scratch. And rebuild Jar files for CI/CD.

                                        Run commnad to clean and re-install all dependencies:
                                            mvn clean install 

                                            This command made of 2 commands.
                                            mvn clean   -   deletes target folder which contains all caches, complied files
                                            mvn install -   Install dependencies from POM.xml, compile code, run test classes, package application (jar file)

                                        Run application and Test it using Postman:
                                            Way 1 using Maven:
                                                To run application from console use mvn command:
                                                    mvn spring-boot:run

                                                    NOTE:
                                                        You need Maven to run this command so make sure it is installed to system.
                                                        In POM.xml file has maven plugin added to build. 
                                                        Else you can't run application from terminal.

                                            Way 2 using Java:
                                                Java command to run application from console:
                                                    syntex:
                                                        java -jar PATH_TO_FILE
                                                    
                                                    java -jar target/accounts-0.0.1-SNAPSHOT.jar

                                            Run all APIs from postman.

                                    Step 2:
                                        Generate Docker image:
                                            Create Dockerfile which is blueprint to create container. 
                                            It has layers and each layer has instruction in order to build container.

                                            We have to install all dependency and perform all steps before running application. 
                                            From installing java dependency, coping all jar files, and executing run command.

                                            Dockerfile:
                                                FROM openjdk:17-jdk-slim
                                                MAINTAINER easybytes.com
                                                COPY target/accounts-0.0.1-SNAPSHOT.jar accounts-0.0.1-SNAPSHOT.jar
                                                ENTRYPOINT ["java", "-jar", "accounts-0.0.1-SNAPSHOT.jar"]

                                            Run docker build command:
                                                syntex:
                                                    docker build . -t DOMAIN_NAME/SERVICE_NAME:VERSION

                                                    docker build . -t eazybytes/accounts:s4

                                            View Docker image by command:
                                                docker images

                                    Step 3:
                                        Generate Container:
                                            syntex:
                                                docker run -p 8080:8080 DOCKER_IMAGE_NAME

                                                docker run -p 8080:8080 eazybytes/accounts:s4

                                            Generate Container in detached mode so that you can access terminal to run other commands.
                                            syntex:
                                                docker run -d -p 8080:8080 DOCKER_IMAGE_NAME

                                                docker run -d -p 8080:8080 eazybytes/accounts:s4

                                            Go to Docker Desktop to view container to verify it is running. Or use postman to test apis.

                        BuildPack   :
                            Simplifies the process, we do not need to write a low-level dockerfile.

                            Step 1:
                                Add docker image name into POM.xml file.
                                    <plugin>
                                        <groupId>org.springframework.boot</groupId>
                                        <artifactId>spring-boot-maven-plugin</artifactId>
                                        <configuration>
                                            <image>
                                                <name>eazybytes/${project.artifactId}:s4</name>
                                            </image>
                                        </configuration>
                                    </plugin>

                            Step 2:
                                Generate docker image without dockerfile by using buildpacks:
                                    Run command:
                                        mvn spring-boot:build-image

                            Step 3:
                                Create docker container:
                                    docker run -d -p 8090:8090 DOCKER_IMAGE_NAME

                        Google Jib  :
                            Maintained by Google, For building Docker images of Java applications.
                            
                            Step 1:
                                Add plugin jib to POM.XML file:
                                    Go to website and copy the xml code.
                                    Make sure to give proper name to image.

                                Add <packaging>jar</packaging> to POM.xml file.
                            
                            Step 2:
                                Generate docker image:
                                    mvn compile jib:dockerBuild

                            Step 3:
                                Build docker container  
                                    docker run -d -p 9000:9000 DOCKER_IMAGE_NAME

Docker compose ::
            Instead of creating one by one, docker images and container for each microservice. Use Docker compose to create all containers.

            Create "docker-compose.yml" file:
            // This file will create Account-ms container but we already need image created inside docker to run application.
                services:
                    accounts:
                        image: "eazybytes/accounts:s4"
                        container_name: accounts-ms
                        ports:
                        - "8080:8080"
                        deploy:
                        resources:
                            limits:
                            memory: 700m
                        networks:
                        - eazybank
                networks:
                    eazybank:
                        driver: "bridge"

            Commands::
                docker compose up -d    --> To create containers out of docker images
                docker compose stop     --> To stop containers from executing requests
                docker compose start    --> To continue executing upcoming requests to container
                docker compose down     --> To delete containers 

Port mapping/ Port forwarding/ Port publishing  :
            In docker, containers are in isloated network.
            We need access to external port to access this isloated network. 

            During "docker run -d -p 8081:8080 DOCKER_IMAGE_NAME", 
            we are creating container at 8080 port number which is isloated. 
            While 8081 port is external port from where user can access APIs and application features.

